{"version":3,"file":"metadata.js","sources":["../../src/metadata.ts"],"sourcesContent":["import type { Event, StackParser } from '@sentry/types';\nimport { GLOBAL_OBJ } from '@sentry/utils';\n\n/** Keys are source filename/url, values are metadata objects. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst filenameMetadataMap = new Map<string, any>();\n/** Set of stack strings that have already been parsed. */\nconst parsedStacks = new Set<string>();\n\nfunction ensureMetadataStacksAreParsed(parser: StackParser): void {\n  if (!GLOBAL_OBJ._sentryModuleMetadata) {\n    return;\n  }\n\n  for (const stack of Object.keys(GLOBAL_OBJ._sentryModuleMetadata)) {\n    const metadata = GLOBAL_OBJ._sentryModuleMetadata[stack];\n\n    if (parsedStacks.has(stack)) {\n      continue;\n    }\n\n    // Ensure this stack doesn't get parsed again\n    parsedStacks.add(stack);\n\n    const frames = parser(stack);\n\n    // Go through the frames starting from the top of the stack and find the first one with a filename\n    for (const frame of frames.reverse()) {\n      if (frame.filename) {\n        // Save the metadata for this filename\n        filenameMetadataMap.set(frame.filename, metadata);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Retrieve metadata for a specific JavaScript file URL.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadataForUrl(parser: StackParser, filename: string): any | undefined {\n  ensureMetadataStacksAreParsed(parser);\n  return filenameMetadataMap.get(filename);\n}\n\n/**\n * Adds metadata to stack frames.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\nexport function addMetadataToStackFrames(parser: StackParser, event: Event): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        if (!frame.filename) {\n          continue;\n        }\n\n        const metadata = getMetadataForUrl(parser, frame.filename);\n\n        if (metadata) {\n          frame.module_metadata = metadata;\n        }\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Strips metadata from stack frames.\n */\nexport function stripMetadataFromStackFrames(event: Event): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        delete frame.module_metadata;\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n"],"names":["GLOBAL_OBJ"],"mappings":";;;;AAGA;AACA;AACA,MAAA,mBAAA,GAAA,IAAA,GAAA,EAAA,CAAA;AACA;AACA,MAAA,YAAA,GAAA,IAAA,GAAA,EAAA,CAAA;AACA;AACA,SAAA,6BAAA,CAAA,MAAA,EAAA;AACA,EAAA,IAAA,CAAAA,gBAAA,CAAA,qBAAA,EAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,KAAA,MAAA,KAAA,IAAA,MAAA,CAAA,IAAA,CAAAA,gBAAA,CAAA,qBAAA,CAAA,EAAA;AACA,IAAA,MAAA,QAAA,GAAAA,gBAAA,CAAA,qBAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,YAAA,CAAA,GAAA,CAAA,KAAA,CAAA,EAAA;AACA,MAAA,SAAA;AACA,KAAA;AACA;AACA;AACA,IAAA,YAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA,IAAA,MAAA,MAAA,GAAA,MAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA;AACA,IAAA,KAAA,MAAA,KAAA,IAAA,MAAA,CAAA,OAAA,EAAA,EAAA;AACA,MAAA,IAAA,KAAA,CAAA,QAAA,EAAA;AACA;AACA,QAAA,mBAAA,CAAA,GAAA,CAAA,KAAA,CAAA,QAAA,EAAA,QAAA,CAAA,CAAA;AACA,QAAA,MAAA;AACA,OAAA;AACA,KAAA;AACA,GAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,iBAAA,CAAA,MAAA,EAAA,QAAA,EAAA;AACA,EAAA,6BAAA,CAAA,MAAA,CAAA,CAAA;AACA,EAAA,OAAA,mBAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,wBAAA,CAAA,MAAA,EAAA,KAAA,EAAA;AACA,EAAA,IAAA;AACA;AACA,IAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,OAAA,CAAA,SAAA,IAAA;AACA,MAAA,IAAA,CAAA,SAAA,CAAA,UAAA,EAAA;AACA,QAAA,OAAA;AACA,OAAA;AACA;AACA,MAAA,KAAA,MAAA,KAAA,IAAA,SAAA,CAAA,UAAA,CAAA,MAAA,IAAA,EAAA,EAAA;AACA,QAAA,IAAA,CAAA,KAAA,CAAA,QAAA,EAAA;AACA,UAAA,SAAA;AACA,SAAA;AACA;AACA,QAAA,MAAA,QAAA,GAAA,iBAAA,CAAA,MAAA,EAAA,KAAA,CAAA,QAAA,CAAA,CAAA;AACA;AACA,QAAA,IAAA,QAAA,EAAA;AACA,UAAA,KAAA,CAAA,eAAA,GAAA,QAAA,CAAA;AACA,SAAA;AACA,OAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA,OAAA,CAAA,EAAA;AACA;AACA,GAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,4BAAA,CAAA,KAAA,EAAA;AACA,EAAA,IAAA;AACA;AACA,IAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,OAAA,CAAA,SAAA,IAAA;AACA,MAAA,IAAA,CAAA,SAAA,CAAA,UAAA,EAAA;AACA,QAAA,OAAA;AACA,OAAA;AACA;AACA,MAAA,KAAA,MAAA,KAAA,IAAA,SAAA,CAAA,UAAA,CAAA,MAAA,IAAA,EAAA,EAAA;AACA,QAAA,OAAA,KAAA,CAAA,eAAA,CAAA;AACA,OAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA,OAAA,CAAA,EAAA;AACA;AACA,GAAA;AACA;;;;;;"}