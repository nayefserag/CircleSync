{"version":3,"file":"dynamicSamplingContext.js","sources":["../../../src/tracing/dynamicSamplingContext.ts"],"sourcesContent":["import type { Client, DynamicSamplingContext, Scope } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatchs the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(\n  trace_id: string,\n  client: Client,\n  scope?: Scope,\n): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n  const { segment: user_segment } = (scope && scope.getUser()) || {};\n\n  const dsc = dropUndefinedKeys({\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    user_segment,\n    public_key,\n    trace_id,\n  }) as DynamicSamplingContext;\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n"],"names":[],"mappings":";;;AAKA;AACA;AACA;AACA;AACA;AACA,SAAA,mCAAA;AACA,EAAA,QAAA;AACA,EAAA,MAAA;AACA,EAAA,KAAA;AACA,EAAA;AACA,EAAA,MAAA,OAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA;AACA;AACA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,IAAA,EAAA,CAAA;AACA,EAAA,MAAA,EAAA,OAAA,EAAA,YAAA,EAAA,GAAA,CAAA,KAAA,IAAA,KAAA,CAAA,OAAA,EAAA,KAAA,EAAA,CAAA;AACA;AACA,EAAA,MAAA,GAAA,GAAA,iBAAA,CAAA;AACA,IAAA,WAAA,EAAA,OAAA,CAAA,WAAA,IAAA,mBAAA;AACA,IAAA,OAAA,EAAA,OAAA,CAAA,OAAA;AACA,IAAA,YAAA;AACA,IAAA,UAAA;AACA,IAAA,QAAA;AACA,GAAA,CAAA,EAAA;AACA;AACA,EAAA,MAAA,CAAA,IAAA,IAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,OAAA,GAAA,CAAA;AACA;;;;"}