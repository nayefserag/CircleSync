{"version":3,"file":"metadata.js","sources":["../../../src/integrations/metadata.ts"],"sourcesContent":["import type { EventItem, EventProcessor, Hub, Integration } from '@sentry/types';\nimport { forEachEnvelopeItem } from '@sentry/utils';\n\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata';\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n */\nexport class ModuleMetadata implements Integration {\n  /*\n   * @inheritDoc\n   */\n  public static id: string = 'ModuleMetadata';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  public constructor() {\n    this.name = ModuleMetadata.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const client = getCurrentHub().getClient();\n\n    if (!client || typeof client.on !== 'function') {\n      return;\n    }\n\n    // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n    client.on('beforeEnvelope', envelope => {\n      forEachEnvelopeItem(envelope, (item, type) => {\n        if (type === 'event') {\n          const event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n\n          if (event) {\n            stripMetadataFromStackFrames(event);\n            item[1] = event;\n          }\n        }\n      });\n    });\n\n    const stackParser = client.getOptions().stackParser;\n\n    addGlobalEventProcessor(event => {\n      addMetadataToStackFrames(stackParser, event);\n      return event;\n    });\n  }\n}\n"],"names":[],"mappings":";;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,cAAA,EAAA;AACA;AACA;AACA;AACA,GAAA,OAAA,YAAA,GAAA,CAAA,IAAA,CAAA,EAAA,GAAA,iBAAA,CAAA;AACA;AACA;AACA;AACA;;AAGA,GAAA,WAAA,GAAA;AACA,IAAA,IAAA,CAAA,IAAA,GAAA,cAAA,CAAA,EAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,GAAA,SAAA,CAAA,uBAAA,EAAA,aAAA,EAAA;AACA,IAAA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA,CAAA;AACA;AACA,IAAA,IAAA,CAAA,MAAA,IAAA,OAAA,MAAA,CAAA,EAAA,KAAA,UAAA,EAAA;AACA,MAAA,OAAA;AACA,KAAA;AACA;AACA;AACA,IAAA,MAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,IAAA;AACA,MAAA,mBAAA,CAAA,QAAA,EAAA,CAAA,IAAA,EAAA,IAAA,KAAA;AACA,QAAA,IAAA,IAAA,KAAA,OAAA,EAAA;AACA,UAAA,MAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AACA;AACA,UAAA,IAAA,KAAA,EAAA;AACA,YAAA,4BAAA,CAAA,KAAA,CAAA,CAAA;AACA,YAAA,IAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA;AACA,WAAA;AACA,SAAA;AACA,OAAA,CAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA;AACA,IAAA,MAAA,WAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,WAAA,CAAA;AACA;AACA,IAAA,uBAAA,CAAA,KAAA,IAAA;AACA,MAAA,wBAAA,CAAA,WAAA,EAAA,KAAA,CAAA,CAAA;AACA,MAAA,OAAA,KAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA,CAAA,cAAA,CAAA,YAAA,EAAA;;;;"}