{"version":3,"file":"aggregate-errors.js","sources":["../../src/aggregate-errors.ts"],"sourcesContent":["import type { Event, EventHint, Exception, ExtendedError, StackParser } from '@sentry/types';\n\nimport { isInstanceOf } from './is';\nimport { truncate } from './string';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  maxValueLimit: number = 250,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(\n      aggregateExceptionsFromError(\n        exceptionFromErrorImplementation,\n        parser,\n        limit,\n        hint.originalException as ExtendedError,\n        key,\n        event.exception.values,\n        originalException,\n        0,\n      ),\n      maxValueLimit,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    is_exception_group: true,\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions: Exception[], maxValueLength: number): Exception[] {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\n"],"names":["isInstanceOf","truncate"],"mappings":"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"}