{"version":3,"file":"browsertracing.js","sources":["../../../src/browser/browsertracing.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Hub, IdleTransaction } from '@sentry/core';\nimport { addTracingExtensions, getActiveTransaction, startIdleTransaction, TRACING_DEFAULTS } from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { getDomElement, logger, tracingContextFromHeaders } from '@sentry/utils';\n\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport {\n  addPerformanceEntries,\n  startTrackingInteractions,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from './metrics';\nimport type { RequestInstrumentationOptions } from './request';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nimport { WINDOW } from './types';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * The heartbeat interval. If no new spans are started or open spans are finished within 3 heartbeats,\n   * the transaction will be finished.\n   * Time is in ms.\n   *\n   * Default: 5000\n   */\n  heartbeatInterval: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{\n    /**\n     * @deprecated This property no longer has any effect and will be removed in v8.\n     */\n    _reportAllChanges: boolean;\n  }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   * Note that the `enableLongTask` options is deprecated in favor of the option at the top level, and will be removed in v8.\n   *\n   * TODO (v8): Remove enableLongTask\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableLongTask: boolean;\n    enableInteractions: boolean;\n    onStartRouteTransaction: (t: Transaction | undefined, ctx: TransactionContext, getCurrentHub: () => Hub) => void;\n  }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(this: void, context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    this: void,\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private _getCurrentHub?: () => Hub;\n\n  private _latestRouteName?: string;\n  private _latestRouteSource?: TransactionSource;\n\n  private _collectWebVitals: () => void;\n\n  private _hasSetTracePropagationTargets: boolean;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    this.name = BROWSER_TRACING_INTEGRATION_ID;\n    this._hasSetTracePropagationTargets = false;\n\n    addTracingExtensions();\n\n    if (__DEBUG_BUILD__) {\n      this._hasSetTracePropagationTargets = !!(\n        _options &&\n        // eslint-disable-next-line deprecation/deprecation\n        (_options.tracePropagationTargets || _options.tracingOrigins)\n      );\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n      _experiments,\n    } = this.options;\n\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    // eslint-disable-next-line deprecation/deprecation\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if (__DEBUG_BUILD__ && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn(\n        '[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.',\n      );\n    }\n\n    instrumentRouting(\n      (context: TransactionContext) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const hub = this._getCurrentHub();\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTrace = isPageloadTransaction ? getMetaContent('sentry-trace') : '';\n    const baggage = isPageloadTransaction ? getMetaContent('baggage') : '';\n    const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n      sentryTrace,\n      baggage,\n    );\n\n    const expandedContext: TransactionContext = {\n      ...context,\n      ...traceparentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n\n    if (finalContext.sampled === false) {\n      __DEBUG_BUILD__ &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n    );\n\n    const scope = hub.getScope();\n\n    // If it's a pageload and there is a meta tag set\n    // use the traceparentData as the propagation context\n    if (isPageloadTransaction && traceparentData) {\n      scope.setPropagationContext(propagationContext);\n    } else {\n      // Navigation transactions should set a new propagation context based on the\n      // created idle transaction.\n      scope.setPropagationContext({\n        traceId: idleTransaction.traceId,\n        spanId: idleTransaction.spanId,\n        parentSpanId: idleTransaction.parentSpanId,\n        sampled: idleTransaction.sampled,\n      });\n    }\n\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction as Transaction;\n  }\n\n  /** Start listener for interaction transactions */\n  private _registerInteractionListener(): void {\n    let inflightInteractionTransaction: IdleTransaction | undefined;\n    const registerInteractionTransaction = (): void => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        __DEBUG_BUILD__ &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        __DEBUG_BUILD__ && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        __DEBUG_BUILD__ &&\n          logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context: TransactionContext = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | undefined {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n"],"names":["TRACING_DEFAULTS","instrumentRoutingWithDefaults","defaultRequestInstrumentationOptions","addTracingExtensions","startTrackingWebVitals","startTrackingLongTasks","startTrackingInteractions","logger","registerBackgroundTabDetection","instrumentOutgoingRequests","tracingContextFromHeaders","WINDOW","startIdleTransaction","addPerformanceEntries","getActiveTransaction","getDomElement"],"mappings":"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"}