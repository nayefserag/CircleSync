{"version":3,"file":"lazy.js","sources":["../../../../src/node/integrations/lazy.ts"],"sourcesContent":["import type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire } from '@sentry/utils';\n\nexport interface LazyLoadedIntegration<T = object> extends Integration {\n  /**\n   * Loads the integration's dependency and caches it so it doesn't have to be loaded again.\n   *\n   * If this returns undefined, the dependency could not be loaded.\n   */\n  loadDependency(): T | undefined;\n}\n\nexport const lazyLoadedNodePerformanceMonitoringIntegrations: (() => LazyLoadedIntegration)[] = [\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo({ useNestjs: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './graphql') as {\n      GraphQL: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.GraphQL();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo({ mongoose: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './mysql') as {\n      Mysql: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mysql();\n  },\n  () => {\n    const integration = dynamicRequire(module, './postgres') as {\n      Postgres: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Postgres();\n  },\n];\n"],"names":["dynamicRequire"],"mappings":";;;;AAYA,MAAA,+CAAA,GAAA;AACA,EAAA,MAAA;AACA,IAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,UAAA,CAAA;;AAEA,CAAA;AACA,IAAA,OAAA,IAAA,WAAA,CAAA,MAAA,EAAA,CAAA;AACA,GAAA;AACA,EAAA,MAAA;AACA,IAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,UAAA,CAAA;;AAEA,CAAA;AACA,IAAA,OAAA,IAAA,WAAA,CAAA,MAAA,CAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,MAAA;AACA,IAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,WAAA,CAAA;;AAEA,CAAA;AACA,IAAA,OAAA,IAAA,WAAA,CAAA,OAAA,EAAA,CAAA;AACA,GAAA;AACA,EAAA,MAAA;AACA,IAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,SAAA,CAAA;;AAEA,CAAA;AACA,IAAA,OAAA,IAAA,WAAA,CAAA,KAAA,EAAA,CAAA;AACA,GAAA;AACA,EAAA,MAAA;AACA,IAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,SAAA,CAAA;;AAEA,CAAA;AACA,IAAA,OAAA,IAAA,WAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,MAAA;AACA,IAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,SAAA,CAAA;;AAEA,CAAA;AACA,IAAA,OAAA,IAAA,WAAA,CAAA,KAAA,EAAA,CAAA;AACA,GAAA;AACA,EAAA,MAAA;AACA,IAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,YAAA,CAAA;;AAEA,CAAA;AACA,IAAA,OAAA,IAAA,WAAA,CAAA,QAAA,EAAA,CAAA;AACA,GAAA;AACA;;;;"}