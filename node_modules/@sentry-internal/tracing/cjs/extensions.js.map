{"version":3,"file":"extensions.js","sources":["../../src/extensions.ts"],"sourcesContent":["import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\n"],"names":["getMainCarrier","dynamicRequire","loadModule","addTracingExtensions","isNodeEnv"],"mappings":";;;;;AAIA;AACA;AACA;AACA,SAAA,6BAAA,GAAA;AACA,EAAA,MAAA,OAAA,GAAAA,mBAAA,EAAA,CAAA;AACA,EAAA,IAAA,CAAA,OAAA,CAAA,UAAA,EAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,2BAAA,GAAA;AACA,IAAA,OAAA,GAAA;AACA,MAAA,MAAA,WAAA,GAAAC,oBAAA,CAAA,MAAA,EAAA,2BAAA,CAAA;;AAEA,CAAA;AACA,MAAA,OAAA,IAAA,WAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAAA;AACA,IAAA,QAAA,GAAA;AACA,MAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,2BAAA,CAAA;;AAEA,CAAA;AACA,MAAA,OAAA,IAAA,WAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAAA;AACA,IAAA,KAAA,GAAA;AACA,MAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,2BAAA,CAAA;;AAEA,CAAA;AACA,MAAA,OAAA,IAAA,WAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAAA;AACA,IAAA,EAAA,GAAA;AACA,MAAA,MAAA,WAAA,GAAAA,oBAAA,CAAA,MAAA,EAAA,8BAAA,CAAA;;AAEA,CAAA;AACA,MAAA,OAAA,IAAA,WAAA,CAAA,QAAA,EAAA,CAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,MAAA,cAAA,GAAA,MAAA,CAAA,IAAA,CAAA,2BAAA,CAAA;AACA,KAAA,MAAA,CAAA,UAAA,IAAA,CAAA,CAAAC,gBAAA,CAAA,UAAA,CAAA,CAAA;AACA,KAAA,GAAA,CAAA,GAAA,IAAA;AACA,MAAA,IAAA;AACA,QAAA,OAAA,2BAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,OAAA,CAAA,OAAA,CAAA,EAAA;AACA,QAAA,OAAA,SAAA,CAAA;AACA,OAAA;AACA,KAAA,CAAA;AACA,KAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA;AACA;AACA,EAAA,IAAA,cAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,UAAA,CAAA,YAAA,GAAA,CAAA,IAAA,OAAA,CAAA,UAAA,CAAA,YAAA,IAAA,EAAA,CAAA,EAAA,GAAA,cAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,mBAAA,GAAA;AACA,EAAAC,yBAAA,EAAA,CAAA;AACA;AACA;AACA,EAAA,IAAAC,eAAA,EAAA,EAAA;AACA,IAAA,6BAAA,EAAA,CAAA;AACA,GAAA;AACA;;;;"}